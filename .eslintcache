[{"C:\\Programação\\Lets-code\\src\\index.tsx":"1","C:\\Programação\\Lets-code\\src\\App.tsx":"2","C:\\Programação\\Lets-code\\src\\styles\\global.ts":"3","C:\\Programação\\Lets-code\\src\\hooks\\ActionsContext.tsx":"4","C:\\Programação\\Lets-code\\src\\Components\\Board\\index.tsx":"5","C:\\Programação\\Lets-code\\src\\hooks\\useFetch.ts":"6","C:\\Programação\\Lets-code\\src\\Components\\Board\\styles.ts":"7","C:\\Programação\\Lets-code\\src\\utils\\toast.ts":"8","C:\\Programação\\Lets-code\\src\\services\\api.ts":"9","C:\\Programação\\Lets-code\\src\\Components\\List\\index.tsx":"10","C:\\Programação\\Lets-code\\src\\Components\\NewCard\\index.tsx":"11","C:\\Programação\\Lets-code\\src\\Components\\Card\\index.tsx":"12","C:\\Programação\\Lets-code\\src\\Components\\List\\styles.ts":"13","C:\\Programação\\Lets-code\\src\\Components\\NewCard\\styles.ts":"14","C:\\Programação\\Lets-code\\src\\Components\\Card\\styles.ts":"15"},{"size":151,"mtime":1637322517107,"results":"16","hashOfConfig":"17"},{"size":513,"mtime":1637323209870,"results":"18","hashOfConfig":"17"},{"size":363,"mtime":1637322517113,"results":"19","hashOfConfig":"17"},{"size":5269,"mtime":1637322517104,"results":"20","hashOfConfig":"17"},{"size":2073,"mtime":1637322517086,"results":"21","hashOfConfig":"17"},{"size":338,"mtime":1637322517105,"results":"22","hashOfConfig":"17"},{"size":170,"mtime":1637322517089,"results":"23","hashOfConfig":"17"},{"size":1811,"mtime":1637322517116,"results":"24","hashOfConfig":"17"},{"size":337,"mtime":1637322517111,"results":"25","hashOfConfig":"17"},{"size":403,"mtime":1637322517095,"results":"26","hashOfConfig":"17"},{"size":1004,"mtime":1637323239773,"results":"27","hashOfConfig":"17"},{"size":5570,"mtime":1637322517091,"results":"28","hashOfConfig":"17"},{"size":529,"mtime":1637322517097,"results":"29","hashOfConfig":"17"},{"size":1520,"mtime":1637322517101,"results":"30","hashOfConfig":"17"},{"size":1872,"mtime":1637322517092,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"16xnwdd",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Programação\\Lets-code\\src\\index.tsx",[],[],"C:\\Programação\\Lets-code\\src\\App.tsx",[],"C:\\Programação\\Lets-code\\src\\styles\\global.ts",[],"C:\\Programação\\Lets-code\\src\\hooks\\ActionsContext.tsx",["65","66"],"import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useFetch } from './useFetch';\r\nimport api from '../services/api';\r\nimport ToastFunction from '../utils/toast';\r\ninterface CardData {\r\n    id: string;\r\n    titulo?: string;\r\n    conteudo?: string;\r\n    lista: string;\r\n}\r\n\r\ninterface ActionsContextData {\r\n    data: CardData[];\r\n    handleDeleteCard(id: string): void;\r\n    handleEditToToDo(\r\n        id: string,\r\n        titulo: string,\r\n        conteudo: string,\r\n        lista: string\r\n    ): void;\r\n    handleCreateCard(\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void;\r\n    handleUpdateCardContent(\r\n        id: string,\r\n        lista: string,\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void;\r\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n    editMode: boolean;\r\n}\r\nconst ActionsContext: any = createContext({});\r\n\r\nconst ActionsProvider: React.FC = ({ children }) => {\r\n    const [bearerToken, setBearerToken] = useState(() => {\r\n        const token = localStorage.getItem('@letscode:Token');\r\n        if (token) {\r\n            const formattedToken = JSON.parse(token);\r\n            return formattedToken;\r\n        }\r\n        return '';\r\n    });\r\n    const { data, mutate } = useFetch<CardData[]>(`cards`);\r\n\r\n    useEffect(() => {\r\n        api.post('/login', {\r\n            login: 'letscode',\r\n            senha: 'lets@123'\r\n        }).then((response) => {\r\n            const token = JSON.stringify(response.data);\r\n            localStorage.setItem('@letscode:Token', token);\r\n            setBearerToken(response.data);\r\n        });\r\n    }, []);\r\n\r\n    const handleDeleteCard = (id: string): void => {\r\n        api.delete(`/cards/${id}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${bearerToken}`\r\n            }\r\n        });\r\n\r\n        const newCardList = data\r\n            ?.filter((card) => card.id != id)\r\n            .map((card) => {\r\n                return card;\r\n            });\r\n        mutate(newCardList, false);\r\n        ToastFunction('Card deleted!', 'success');\r\n    };\r\n    const handleEditToToDo = (\r\n        id: string,\r\n        titulo: string,\r\n        conteudo: string,\r\n        lista: string\r\n    ): void => {\r\n        api.put(`/cards/${id}`, {\r\n            id: id,\r\n            titulo: titulo,\r\n            conteudo: conteudo,\r\n            lista: lista\r\n        });\r\n\r\n        const newCardList = data?.map((card) => {\r\n            if (card.id === id) {\r\n                return { ...card, lista: lista };\r\n            }\r\n\r\n            return card;\r\n        });\r\n\r\n        mutate(newCardList, false);\r\n    };\r\n\r\n    const handleCreateCard = (\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ) => {\r\n        if (\r\n            inputRef.current?.value === '' ||\r\n            textAreaRef.current?.value === ''\r\n        ) {\r\n            ToastFunction('Fill all fields', 'error');\r\n            return;\r\n        }\r\n        api.post('/cards', {\r\n            titulo: inputRef.current?.value,\r\n            conteudo: textAreaRef.current?.value,\r\n            lista: 'ToDo'\r\n        }).then((response) => {\r\n            const newCard = {\r\n                id: response.data.id,\r\n                titulo: inputRef.current?.value,\r\n                conteudo: textAreaRef.current?.value,\r\n                lista: 'ToDo'\r\n            };\r\n            const newList = [];\r\n            data?.map((card) => {\r\n                newList.push(card);\r\n            });\r\n\r\n            newList.push(newCard);\r\n            ToastFunction('Card Created!', 'success');\r\n            mutate(newList, false);\r\n        });\r\n    };\r\n\r\n    const handleUpdateCardContent = (\r\n        id: string,\r\n        lista: string,\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void => {\r\n        api.put(`/cards/${id}`, {\r\n            id: id,\r\n            titulo: inputRef.current?.value,\r\n            conteudo: textAreaRef.current?.value,\r\n            lista: lista\r\n        });\r\n\r\n        const newCardList = data?.map((card) => {\r\n            if (card.id === id) {\r\n                return {\r\n                    ...card,\r\n                    titulo: inputRef.current?.value,\r\n                    conteudo: textAreaRef.current?.value,\r\n                    lista: lista\r\n                };\r\n            }\r\n            return card;\r\n        });\r\n\r\n        mutate(newCardList, false);\r\n    };\r\n    return (\r\n        <ActionsContext.Provider\r\n            value={{\r\n                data,\r\n                handleDeleteCard,\r\n                handleEditToToDo,\r\n                handleCreateCard,\r\n                handleUpdateCardContent\r\n            }}\r\n        >\r\n            {children}\r\n        </ActionsContext.Provider>\r\n    );\r\n};\r\n\r\nfunction useActions(): ActionsContextData {\r\n    const context: any = useContext(ActionsContext);\r\n\r\n    if (!context) {\r\n        throw new Error('UseAuth must be used within a AuthProvider');\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\nexport { ActionsContext, ActionsProvider, useActions };\r\n","C:\\Programação\\Lets-code\\src\\Components\\Board\\index.tsx",[],"C:\\Programação\\Lets-code\\src\\hooks\\useFetch.ts",["67","68"],"import useSWR from 'swr';\r\nimport api from '../services/api';\r\n\r\nexport function useFetch<Data = any, Error = any>(url: string) {\r\n    const { data, error, mutate } = useSWR<Data, Error>(url, async (url) => {\r\n        const response = await api.get(url);\r\n        return response.data;\r\n    });\r\n\r\n    return { data, error, mutate };\r\n}\r\n","C:\\Programação\\Lets-code\\src\\Components\\Board\\styles.ts",[],"C:\\Programação\\Lets-code\\src\\utils\\toast.ts",[],"C:\\Programação\\Lets-code\\src\\services\\api.ts",[],"C:\\Programação\\Lets-code\\src\\Components\\List\\index.tsx",[],"C:\\Programação\\Lets-code\\src\\Components\\NewCard\\index.tsx",[],"C:\\Programação\\Lets-code\\src\\Components\\Card\\index.tsx",[],"C:\\Programação\\Lets-code\\src\\Components\\List\\styles.ts",[],"C:\\Programação\\Lets-code\\src\\Components\\NewCard\\styles.ts",[],"C:\\Programação\\Lets-code\\src\\Components\\Card\\styles.ts",[],{"ruleId":"69","severity":1,"message":"70","line":34,"column":23,"nodeType":"71","messageId":"72","endLine":34,"endColumn":26,"suggestions":"73"},{"ruleId":"69","severity":1,"message":"70","line":173,"column":20,"nodeType":"71","messageId":"72","endLine":173,"endColumn":23,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":33,"nodeType":"71","messageId":"72","endLine":4,"endColumn":36,"suggestions":"75"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":46,"nodeType":"71","messageId":"72","endLine":4,"endColumn":49,"suggestions":"76"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["77","78"],["79","80"],["81","82"],["83","84"],{"messageId":"85","fix":"86","desc":"87"},{"messageId":"88","fix":"89","desc":"90"},{"messageId":"85","fix":"91","desc":"87"},{"messageId":"88","fix":"92","desc":"90"},{"messageId":"85","fix":"93","desc":"87"},{"messageId":"88","fix":"94","desc":"90"},{"messageId":"85","fix":"95","desc":"87"},{"messageId":"88","fix":"96","desc":"90"},"suggestUnknown",{"range":"97","text":"98"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"97","text":"99"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"100","text":"98"},{"range":"100","text":"99"},{"range":"101","text":"98"},{"range":"101","text":"99"},{"range":"102","text":"98"},{"range":"102","text":"99"},[1006,1009],"unknown","never",[5047,5050],[97,100],[110,113]]