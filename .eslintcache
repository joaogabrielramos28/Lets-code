[{"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\index.tsx":"1","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\App.tsx":"2","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Card\\index.tsx":"3","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Card\\styles.ts":"4","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\styles\\global.ts":"5","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\List\\index.tsx":"6","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\List\\styles.ts":"7","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Board\\index.tsx":"8","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Board\\styles.ts":"9","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\NewCard\\index.tsx":"10","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\NewCard\\styles.ts":"11","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\services\\api.ts":"12","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\hooks\\useFetch.ts":"13","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\hooks\\ActionsContext.tsx":"14","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\utils\\toast.ts":"15"},{"size":151,"mtime":1637104493353,"results":"16","hashOfConfig":"17"},{"size":510,"mtime":1637295661473,"results":"18","hashOfConfig":"17"},{"size":5817,"mtime":1637299072043,"results":"19","hashOfConfig":"17"},{"size":1872,"mtime":1637298302115,"results":"20","hashOfConfig":"17"},{"size":363,"mtime":1637296793647,"results":"21","hashOfConfig":"17"},{"size":403,"mtime":1637190514347,"results":"22","hashOfConfig":"17"},{"size":529,"mtime":1637297558701,"results":"23","hashOfConfig":"17"},{"size":2073,"mtime":1637299074234,"results":"24","hashOfConfig":"17"},{"size":170,"mtime":1637190527230,"results":"25","hashOfConfig":"17"},{"size":1043,"mtime":1637291577674,"results":"26","hashOfConfig":"17"},{"size":1520,"mtime":1637297547424,"results":"27","hashOfConfig":"17"},{"size":337,"mtime":1637284233565,"results":"28","hashOfConfig":"17"},{"size":338,"mtime":1637291046000,"results":"29","hashOfConfig":"17"},{"size":5313,"mtime":1637295795323,"results":"30","hashOfConfig":"17"},{"size":1811,"mtime":1637295478410,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"cj226j",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\index.tsx",[],[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\App.tsx",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Card\\index.tsx",["66"],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Card\\styles.ts",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\styles\\global.ts",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\List\\index.tsx",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\List\\styles.ts",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Board\\index.tsx",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\Board\\styles.ts",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\NewCard\\index.tsx",["67"],"import React, { useRef } from 'react';\r\nimport { Container, Content, Actions } from './styles';\r\nimport api from '../../services/api';\r\nimport { IoIosAddCircle } from 'react-icons/io';\r\ninterface NewCardProps {\r\n    handleCreateCard(\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void;\r\n}\r\n\r\nconst NewCard: React.FC<NewCardProps> = ({\r\n    handleCreateCard\r\n}: NewCardProps) => {\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    return (\r\n        <Container>\r\n            <Content>\r\n                <input ref={inputRef} type=\"text\" />\r\n                <textarea ref={textAreaRef} rows={5}></textarea>\r\n            </Content>\r\n            <Actions>\r\n                <IoIosAddCircle\r\n                    size={38}\r\n                    onClick={() => handleCreateCard(inputRef, textAreaRef)}\r\n                />\r\n            </Actions>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NewCard;\r\n","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\Components\\NewCard\\styles.ts",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\services\\api.ts",[],"D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\hooks\\useFetch.ts",["68","69"],"import useSWR from 'swr';\r\nimport api from '../services/api';\r\n\r\nexport function useFetch<Data = any, Error = any>(url: string) {\r\n    const { data, error, mutate } = useSWR<Data, Error>(url, async (url) => {\r\n        const response = await api.get(url);\r\n        return response.data;\r\n    });\r\n\r\n    return { data, error, mutate };\r\n}\r\n","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\hooks\\ActionsContext.tsx",["70","71"],"import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useFetch } from './useFetch';\r\nimport api from '../services/api';\r\nimport ToastFunction from '../utils/toast';\r\ninterface CardData {\r\n    id: string;\r\n    titulo?: string;\r\n    conteudo?: string;\r\n    lista: string;\r\n}\r\n\r\ninterface ActionsContextData {\r\n    data: CardData[];\r\n    handleDeleteCard(id: string): void;\r\n    handleEditToToDo(\r\n        id: string,\r\n        titulo: string,\r\n        conteudo: string,\r\n        lista: string\r\n    ): void;\r\n    handleCreateCard(\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void;\r\n    handleUpdateCardContent(\r\n        id: string,\r\n        lista: string,\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void;\r\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>;\r\n    editMode: boolean;\r\n}\r\nconst ActionsContext: any = createContext({});\r\n\r\nconst ActionsProvider: React.FC = ({ children }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [bearerToken, setBearerToken] = useState(() => {\r\n        const token = localStorage.getItem('@letscode:Token');\r\n        if (token) {\r\n            const formattedToken = JSON.parse(token);\r\n            return formattedToken;\r\n        }\r\n        return '';\r\n    });\r\n    const { data, mutate } = useFetch<CardData[]>(`cards`);\r\n\r\n    useEffect(() => {\r\n        api.post('/login', {\r\n            login: 'letscode',\r\n            senha: 'lets@123'\r\n        }).then((response) => {\r\n            const token = JSON.stringify(response.data);\r\n            localStorage.setItem('@letscode:Token', token);\r\n            setBearerToken(response.data);\r\n        });\r\n    }, []);\r\n\r\n    const handleDeleteCard = (id: string): void => {\r\n        api.delete(`/cards/${id}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${bearerToken}`\r\n            }\r\n        });\r\n\r\n        const newCardList = data\r\n            ?.filter((card) => card.id != id)\r\n            .map((card) => {\r\n                return card;\r\n            });\r\n        mutate(newCardList, false);\r\n        ToastFunction('Card deleted!', 'success');\r\n    };\r\n    const handleEditToToDo = (\r\n        id: string,\r\n        titulo: string,\r\n        conteudo: string,\r\n        lista: string\r\n    ): void => {\r\n        api.put(`/cards/${id}`, {\r\n            id: id,\r\n            titulo: titulo,\r\n            conteudo: conteudo,\r\n            lista: lista\r\n        });\r\n\r\n        const newCardList = data?.map((card) => {\r\n            if (card.id === id) {\r\n                return { ...card, lista: lista };\r\n            }\r\n\r\n            return card;\r\n        });\r\n\r\n        mutate(newCardList, false);\r\n    };\r\n\r\n    const handleCreateCard = (\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ) => {\r\n        if (\r\n            inputRef.current?.value === '' ||\r\n            textAreaRef.current?.value === ''\r\n        ) {\r\n            ToastFunction('Fill all fields', 'error');\r\n            return;\r\n        }\r\n        api.post('/cards', {\r\n            titulo: inputRef.current?.value,\r\n            conteudo: textAreaRef.current?.value,\r\n            lista: 'ToDo'\r\n        });\r\n        const newCard = {\r\n            id: '123',\r\n            titulo: inputRef.current?.value,\r\n            conteudo: textAreaRef.current?.value,\r\n            lista: 'ToDo'\r\n        };\r\n        const newList = [];\r\n        data?.map((card) => {\r\n            newList.push(card);\r\n        });\r\n\r\n        newList.push(newCard);\r\n        ToastFunction('Card Created!', 'success');\r\n        mutate(newList, false);\r\n    };\r\n\r\n    const handleUpdateCardContent = (\r\n        id: string,\r\n        lista: string,\r\n        inputRef: React.RefObject<HTMLInputElement>,\r\n        textAreaRef: React.RefObject<HTMLTextAreaElement>\r\n    ): void => {\r\n        api.put(`/cards/${id}`, {\r\n            id: id,\r\n            titulo: inputRef.current?.value,\r\n            conteudo: textAreaRef.current?.value,\r\n            lista: lista\r\n        });\r\n\r\n        const newCardList = data?.map((card) => {\r\n            if (card.id === id) {\r\n                return {\r\n                    ...card,\r\n                    titulo: inputRef.current?.value,\r\n                    conteudo: textAreaRef.current?.value,\r\n                    lista: lista\r\n                };\r\n            }\r\n            return card;\r\n        });\r\n\r\n        mutate(newCardList, false);\r\n        setEditMode(false);\r\n    };\r\n    return (\r\n        <ActionsContext.Provider\r\n            value={{\r\n                data,\r\n                handleDeleteCard,\r\n                handleEditToToDo,\r\n                handleCreateCard,\r\n                handleUpdateCardContent,\r\n                setEditMode,\r\n                editMode\r\n            }}\r\n        >\r\n            {children}\r\n        </ActionsContext.Provider>\r\n    );\r\n};\r\n\r\nfunction useActions(): ActionsContextData {\r\n    const context: any = useContext(ActionsContext);\r\n\r\n    if (!context) {\r\n        throw new Error('UseAuth must be used within a AuthProvider');\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\nexport { ActionsContext, ActionsProvider, useActions };\r\n","D:\\programaçao\\processos\\let's-code\\desafio-tecnico-frontend\\FRONT\\lets-code\\src\\utils\\toast.ts",[],{"ruleId":"72","severity":1,"message":"73","line":1,"column":25,"nodeType":"74","messageId":"75","endLine":1,"endColumn":33},{"ruleId":"72","severity":1,"message":"76","line":3,"column":8,"nodeType":"74","messageId":"75","endLine":3,"endColumn":11},{"ruleId":"77","severity":1,"message":"78","line":4,"column":33,"nodeType":"79","messageId":"80","endLine":4,"endColumn":36,"suggestions":"81"},{"ruleId":"77","severity":1,"message":"78","line":4,"column":46,"nodeType":"79","messageId":"80","endLine":4,"endColumn":49,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"78","line":34,"column":23,"nodeType":"79","messageId":"80","endLine":34,"endColumn":26,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"78","line":176,"column":20,"nodeType":"79","messageId":"80","endLine":176,"endColumn":23,"suggestions":"84"},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'api' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["85","86"],["87","88"],["89","90"],["91","92"],{"messageId":"93","fix":"94","desc":"95"},{"messageId":"96","fix":"97","desc":"98"},{"messageId":"93","fix":"99","desc":"95"},{"messageId":"96","fix":"100","desc":"98"},{"messageId":"93","fix":"101","desc":"95"},{"messageId":"96","fix":"102","desc":"98"},{"messageId":"93","fix":"103","desc":"95"},{"messageId":"96","fix":"104","desc":"98"},"suggestUnknown",{"range":"105","text":"106"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"105","text":"107"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"108","text":"106"},{"range":"108","text":"107"},{"range":"109","text":"106"},{"range":"109","text":"107"},{"range":"110","text":"106"},{"range":"110","text":"107"},[97,100],"unknown","never",[110,113],[1006,1009],[5091,5094]]